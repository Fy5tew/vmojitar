from io import BytesIO
from functools import lru_cache
from dataclasses import dataclass

import aiohttp
from vkbottle import Keyboard, Text
from vkbottle.bot import Message

from photo_generator import Color
from state_manager import state_manager
from localization import get_color_translation

from .base import random_sid, photo_message_uploader


COLOR_KB_COLS = 2

PATTERN_LINKS = [
    'photo-214739218_457239017',
    'photo-214739218_457239018',
    'photo-214739218_457239019',
    'photo-214739218_457239020',
    'photo-214739218_457239021',
    'photo-214739218_457239022'
]


@dataclass
class Sticker:
    url: str
    width: int
    height: int


@lru_cache()
def _generate_pattern_keyboard() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–∑–æ—Ä–∞

    :return: Json —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    keyboard = Keyboard(one_time=True)
    for i in range(len(PATTERN_LINKS)):
        keyboard.add(Text(
            f'–£–∑–æ—Ä {i + 1}',
            {'pattern': i, 'sid': random_sid}
        ))
        if i != len(PATTERN_LINKS) - 1:
            keyboard.row()
    kb_json = keyboard.get_json()
    return kb_json


@lru_cache()
def _generate_color_keyboard() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞

    :return: Json —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    buttons = []
    for color in Color:
        buttons.append(Text(
            get_color_translation(color.name),
            {'color': color.value, 'sid': random_sid}
        ))
    buttons = [buttons[i:i + COLOR_KB_COLS] for i in range(0, len(buttons), COLOR_KB_COLS)]
    keyboard = Keyboard(one_time=True)
    for i, row in enumerate(buttons):
        for button in row:
            keyboard.add(button)
        if i != len(buttons) - 1:
            keyboard.row()
    kb_json = keyboard.get_json()
    return kb_json


async def get_sticker(event: Message) -> Sticker:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ (url) –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä—ã

    :param event: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º
    :return: Sticker
    """

    sticker = event.attachments[0].sticker
    max_height, sticker_image_url = 0, ''
    width, height = 0, 0
    for image in sticker.images:
        if image.height > max_height:
            sticker_image_url = image.url
            width, height = image.width, image.height
    return Sticker(url=sticker_image_url, width=width, height=height)


async def get_content(url: str) -> BytesIO:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –ø–æ url –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ

    :param url: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    :return: —Ñ–æ—Ç–æ –≤ io.BytesIO
    """

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as request:
            content = BytesIO()
            content.write(await request.read())
            content.seek(0)
            return content


async def choose_pattern(event: Message):
    """
    –í—ã–±–æ—Ä —É–∑–æ—Ä–∞
    """

    kb = _generate_pattern_keyboard()
    await event.answer(
        message="üëèüèª –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É–∑–æ—Ä –¥–ª—è —Ñ–æ–Ω–∞:",
        attachment=",".join(PATTERN_LINKS),
        keyboard=kb
    )


async def choose_color(event: Message):
    """
    –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
    """

    kb = _generate_color_keyboard()
    await event.answer(
        message="üëèüèª –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:",
        keyboard=kb
    )


async def generate_image(event: Message):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """

    await event.answer("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã! –ï–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    avatar = await state_manager.generate_image(event.from_id)
    image = await photo_message_uploader.upload(avatar.getvalue(), peer_id=event.peer_id)
    await event.answer("üî• –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", attachment=image)
